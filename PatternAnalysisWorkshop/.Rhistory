xml.DC <- strsplit(xml.out,".", fixed = TRUE)
xml.DC
xml.DC <- strsplit(xml.out,".", fixed = TRUE)[[1]]
xml.DC <- strsplit(xml.out,".", fixed = TRUE)[[1]]
xml.DC
xml.DC <- strsplit(xml.out,".", fixed = TRUE)[[1]][2]
xml.DC
xml.DC <- paste0(".", strsplit(xml.out,".", fixed = TRUE)[[1]][2], "_DC.xml")
(xml.DC <- paste0(".", strsplit(xml.out,".", fixed = TRUE)[[1]][2], "_DC.xml"))
?saveXML
if (file.exists(xml.DC)) file.remove(xml.DC)
wcs_request <- "DescribeCoverage"
wcs_path <- paste0("https://maps.isric.org/mapserv?map=/map/",voi,".map") # Path to the WCS. See maps.isric.org
wcs_service = "SERVICE=WCS"
wcs_version = "VERSION=2.0.1"
(wcs <- paste(wcs_path, wcs_service, wcs_version, wcs_request, sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
# Save to local disk
xml.out <- paste0(".", tempfile("sg","",".xml"))
tmp <- saveXML(l1, file = xml.out)
gdalinfo(xml.out)
file.remove(xml.out)
# also remove 'helper' XML if created by saveXML
xml.DC <- paste0(".", strsplit(xml.out,".", fixed = TRUE)[[1]][2], "_DC.xml")
if (file.exists(xml.DC)) file.remove(xml.DC)
xml.DC
# also remove 'helper' XML if created by saveXML
xml.DC <- paste0(".", strsplit(xml.out,".", fixed = TRUE)[[1]][2], ".DC.xml")
if (file.exists(xml.DC)) file.remove(xml.DC)
(wcs <- paste(wcs_path,wcs_service,wcs_version,sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
xml.out <- paste0(".", tempfile("sg","",".xml"))
tmp <- saveXML(l1, file = xml.out)
(file.out <- paste0(dest.dir.sg.import, "/", voi_layer, '.tif'))
gdal_translate(xml.out, file.out,
tr=c(250,250),
projwin = bb.sg, projwin_srs = crs.igh, # corners in this CRS
co=c("TILED=YES","COMPRESS=DEFLATE","PREDICTOR=2","BIGTIFF=YES")
)
file.remove(xml.out)
# also remove 'helper' XML if created by saveXML
xml.DC <- paste0(".", strsplit(xml.out,".", fixed = TRUE)[[1]][2], ".DC.xml")
if (file.exists(xml.DC)) file.remove(xml.DC)
# FRAGSTATS-style metrics
# this package is in active development, maybe use the development version
# install.packages("remotes")
# remotes::install_github("r-spatialecology/landscapemetrics")
library(landscapemetrics, warn.conflicts=FALSE, quiet = TRUE)
# utility functions for raster* landscape objects)
library(landscapetools, warn.conflicts=FALSE, quiet = TRUE)
# utility functions for raster* landscape objects)
remotes::install_github("r-opensci/landscapetools")
# utility functions for raster* landscape objects)
remotes::install_github("ropensci/landscapetools")
#| label: r-packages-common
options(warn = -1)
# data wrangling
library(dplyr, warn.conflicts=FALSE, quiet = TRUE)
# colour palettes for graphics
library(RColorBrewer, warn.conflicts=FALSE, quiet = TRUE)
# ggplot graphics
library(ggplot2, warn.conflicts=FALSE, quiet = TRUE)
# multiple graphics in one plot
library(gridExtra, warn.conflicts=FALSE, quiet = TRUE)
#| label: r-package-spatia
# Robert Hijmans raster and vector data; also replaces `raster`
library(terra, warn.conflicts=FALSE, quiet = TRUE)
# ggplot with terra SpatRaster objects
library(tidyterra, warn.conflicts=FALSE, quiet = TRUE)
# older package still needed to convert to `sp` objects
library(raster, warn.conflicts=FALSE, quiet = TRUE)
# Pebesma et al. spatio-temporal data
# Simple Features
library(sf, warn.conflicts=FALSE, quiet = TRUE)
# `sp` spatial classes -- still needed for conversions
library(sp, warn.conflicts=FALSE, quiet = TRUE)
#| label: r-packages-workshop
# variogram modelling
library(gstat, warn.conflicts=FALSE, quiet = TRUE)
# Co-occurrence vectors
library(motif, warn.conflicts=FALSE, quiet = TRUE)
# multivariate distance metrics
library(philentropy, warn.conflicts=FALSE, quiet = TRUE)
# FRAGSTATS-style metrics
# this package is in active development, maybe use the development version
# install.packages("remotes")
# remotes::install_github("r-spatialecology/landscapemetrics")
library(landscapemetrics, warn.conflicts=FALSE, quiet = TRUE)
# utility functions for raster* landscape objects)
remotes::install_github("ropensci/landscapetools")
library(landscapetools, warn.conflicts=FALSE, quiet = TRUE)
# aggreagate maps with supercells
# this package is in active development, maybe use the development version
# install.packages("supercells", repos = "https://nowosad.r-universe.dev")
library(supercells, warn.conflicts=FALSE, quiet = TRUE)
# Gray Level Co-occurence Matrices (GLCM)
library(glcm, warn.conflicts=FALSE, quiet = TRUE)
library(GLCMTextures, warn.conflicts=FALSE, quiet = TRUE)
#| label: set-base-dir
file.dir <- path.expand(".")
#| label: set-base-dir
(file.dir <- path.expand("."))
#| label: set-base-dir
(file.dir <- path.expand("./"))
file.dir <- path.expand("~/ds_reference/DSM2025/")
(file.dir <- path.expand("~/ds_reference/DSM2025/"))
#| label: set-base-dir
(file.dir <- path.expand("/."))
#| label: import
# the GeoTIFF file name
sg.fn <- "lat1011_lon7778_stack.tif"
(sg <- rast(paste0(file.dir, sg.fn)))
#| label: set-base-dir
(file.dir <- path.expand("~/ds_reference/DSM2025/"))
#| label: import
# the GeoTIFF file name
sg.fn <- "lat1011_lon7778_stack.tif"
(sg <- rast(paste0(file.dir, sg.fn)))
#| label: stack-lauers
# layers of the raster stack
layer.names <- names(sg)
tmp <- strsplit(layer.names, "_")
(property.names <- unique(unlist(lapply(tmp, FUN = function(x) x[1]))))
(depth.names <- unique(unlist(lapply(tmp, FUN = function(x) x[2]))))
dim(sg)[3]
dim(sg)
#| label: fig-layer1-all-properties
#| warning: false
to.plot <- grep(depth.names[1], layer.names, fixed = TRUE)
par(mfrow=c(4,2))
tmp <- terra::plot(sg[[to.plot]])
#| label: fig-layer1-all-properties
#| warning: false
to.plot <- grep(depth.names[1], layer.names, fixed = TRUE)
par(mfrow=c(4,2))
tmp <- terra::plot(sg[[to.plot]])
par(mfrow=c(1,1))
par(mfrow=c(2,3))
tmp <- terra::plot(sg[[to.plot]], range = c(r.min, r.max))
par(mfrow=c(1,1))
#| label: fig-all-layers
#| warning: false
to.plot <- grep(property.names[3], names(sg), fixed = TRUE)
r.max <- ceiling(max(global(sg[[to.plot]], fun = "max", na.rm = TRUE)))
r.min <- floor(min(global(sg[[to.plot]], fun = "min", na.rm = TRUE)))
par(mfrow=c(2,3))
tmp <- terra::plot(sg[[to.plot]], range = c(r.min, r.max))
#| label: fig-layer1-all-properties
#| warning: false
to.plot <- grep(depth.names[1], layer.names, fixed = TRUE)
par(mfrow=c(4,2))
tmp <- terra::plot(sg[[to.plot]])
#| label: fig-all-layers
#| warning: false
to.plot <- grep(property.names[3], names(sg), fixed = TRUE)
r.max <- ceiling(max(global(sg[[to.plot]], fun = "max", na.rm = TRUE)))
r.min <- floor(min(global(sg[[to.plot]], fun = "min", na.rm = TRUE)))
par(mfrow=c(2,3))
tmp <- terra::plot(sg[[to.plot]], range = c(r.min, r.max))
#| label: fig-all-layers
#| warning: false
to.plot <- grep(property.names[3], names(sg), fixed = TRUE)
r.max <- ceiling(max(global(sg[[to.plot]], fun = "max", na.rm = TRUE)))
r.min <- floor(min(global(sg[[to.plot]], fun = "min", na.rm = TRUE)))
par(mfrow=c(1,1), mar=c(5,4,4,2)+0.1)
tmp <- terra::plot(sg[[to.plot]], range = c(r.min, r.max))
par(mfrow=c(1,1))
#| label: fig-all-layers
#| warning: false
to.plot <- grep(property.names[3], names(sg), fixed = TRUE)
r.max <- ceiling(max(global(sg[[to.plot]], fun = "max", na.rm = TRUE)))
r.min <- floor(min(global(sg[[to.plot]], fun = "min", na.rm = TRUE)))
par(mfrow=c(1,1), mar=c(5,4,4,2)+0.1)
tmp <- terra::plot(sg[[to.plot]], range = c(r.min, r.max))
par(mfrow=c(1,1))
#| label: crop
test.tile.size <- 0.25  # degrees
test.tile.x.offset <- 0.25 # lrc west from right edge
test.tile.y.offset <- 0.25  # lrc north from bottom edge
ext.crop <- round(as.vector(ext(sg)),2) # line up to .00 decimal degrees
ext.crop["xmax"] <- ext.crop["xmax"] - test.tile.x.offset
ext.crop["xmin"] <- ext.crop["xmax"] - test.tile.size
ext.crop["ymin"] <- ext.crop["ymin"] + test.tile.y.offset
ext.crop["ymax"] <- ext.crop["ymin"] + test.tile.size
ext(ext.crop)
sg4 <- crop(sg, ext(ext.crop))
#| label: fig-layer1-properties-1/4
#| warning: false
to.plot <- grep(depth.names[1], layer.names, fixed = TRUE)
par(mfrow=c(3,3))
tmp <- terra::plot(sg4[[to.plot]])
par(mfrow=c(mfrow=c(1,1), mar=c(5,4,4,2)+0.1)
par(mfrow=c(1,1))
par(mfrow=c(mfrow=c(1,1), mar=c(5,4,4,2)+0.1))
par(mfrow=c(1,1), mar=c(5,4,4,2)+0.1)
par(mfrow=c(1,1), mar=c(5,4,4,2)+0.1))
tmp <- terra::plot(sg4[[to.plot]])
par(mfrow=c(1,1), mar=c(5,4,4,2)+0.1)
tmp <- terra::plot(sg4[[to.plot]])
par(mfrow=c(1,1))
#| label: get.utm
# a function to find the correct UTM zome
long2UTM <- function(long) { (floor((long + 180)/6) %% 60) + 1 }
# find the zone from the central meridian
utm.zone <- long2UTM(st_bbox(sg)$xmin +
0.5*(st_bbox(sg)$xmax - st_bbox(sg)$xmin))
cat(paste("UTM Zone", utm.zone))
epsg.utm <- paste0("epsg:326", utm.zone)
cat(paste("CRS code:", epsg.utm))
#| label: resample
st_bbox(sg4)
sg4.utm <- terra::project(sg4, epsg.utm,
res = c(250, 250), method = "bilinear")
st_bbox(sg4.utm)
dim(sg4.utm)
# keep the coordinates in the data frame
sg4.sp <- as.data.frame(sg4.utm, xy = TRUE)
# convert to SpatialPointsDataFrame by indentifying the fields that are coordinates
coordinates(sg4.sp) <- ~ x + y
class(sg4.sp)
dim(sg4.sp)
sg4.sf <- lapply(1:dim(sg4.sp)[2], function(i) {
st_as_sf(sg4.sp[,i])
})
class(sg4.sf); length(sg4.sf)
# examine one `sf` object in the list
head(sg4.sf[[1]])
#| label: variogram_parameters
range.init <- 1000  # estimated range, m
cutoff.init <- range.init*5  # cutoff for empirical variogram, m
width.init <- 250   # bin width
#| label: variogram_empirical
#| fig-width: 8
#| fig-height: 4
print(layer.names)
names(sg4.sf[[1]])
# give the `sf` object a simple name, also the target variable
var <- sg4.sf[[1]]
names(var)[1] <- "z"
v.sg <- variogram(z ~ 1, loc = var,
cutoff=cutoff.init, width=width.init)
#
plot(v.sg, main = layer.names[1])
#| label: variogram_parameters
range.init <- 10000  # estimated range, m
cutoff.init <- range.init*5  # cutoff for empirical variogram, m
width.init <- 250   # bin width
#| label: variogram_empirical
#| fig-width: 8
#| fig-height: 4
print(layer.names)
names(sg4.sf[[1]])
# give the `sf` object a simple name, also the target variable
var <- sg4.sf[[1]]
names(var)[1] <- "z"
v.sg <- variogram(z ~ 1, loc = var,
cutoff=cutoff.init, width=width.init)
#
plot(v.sg, main = layer.names[1])
#| label: variogram_empirical
#| fig-width: 8
#| fig-height: 4
print(layer.names)
names(sg4.sf[[1]])
# give the `sf` object a simple name, also the target variable
var <- sg4.sf[[1]]
names(var)[1] <- "z"
v.sg <- variogram(z ~ 1, loc = var,
cutoff=cutoff.init, width=width.init)
#
plot(v.sg, main = layer.names[1])
#| label: variogram_parameters
range.init <- 10000  # estimated range, m
cutoff.init <- range.init*5  # cutoff for empirical variogram, m
width.init <- 1000   # bin width
#| label: variogram_parameters
range.init <- 10000  # estimated range, m
cutoff.init <- range.init*5  # cutoff for empirical variogram, m
width.init <- 2000   # bin width
#| label: variogram_empirical
#| fig-width: 8
#| fig-height: 4
print(layer.names)
names(sg4.sf[[1]])
# give the `sf` object a simple name, also the target variable
var <- sg4.sf[[1]]
names(var)[1] <- "z"
v.sg <- variogram(z ~ 1, loc = var,
cutoff=cutoff.init, width=width.init)
#
plot(v.sg, main = layer.names[1])
#| label: variogram_model
vm.sg <- vgm(0.8*max(v.sg$gamma), "Exp", range.init, 0)
print(vmf.sg <- fit.variogram(v.sg, model=vm.sg))
#| label: variogram_model
vm.sg <- vgm(0.8*max(v.sg$gamma), "Exp", range.init, 0)
print(vmf.sg <- fit.variogram(v.sg, model=vm.sg))
#| label: fitted_variogram_model
#| fig-width: 8
#| fig-height: 4
plot(v.sg, model=vmf.sg, main = layer.names[1],
xlab = "separation m", ylab = expression(paste(Delta, plain(pH)^2)))
#| label: variogram_model
vm.sg <- vgm(0.8*max(v.sg$gamma), "Gau", range.init, 0)
print(vmf.sg <- fit.variogram(v.sg, model=vm.sg))
#| label: fitted_variogram_model
#| fig-width: 8
#| fig-height: 4
plot(v.sg, model=vmf.sg, main = layer.names[1],
xlab = "separation m", ylab = expression(paste(Delta, plain(pH)^2)))
make.weights <- function(n = 5, res = 250, vgm) {
m <- matrix(0, nrow = n, ncol = n)
center <- ceiling(n / 2)
for (i in 1:n) {
for (j in 1:n) {
# distance in cell units, multipled by the grid resolution
m[i, j] <- sqrt((i - center)^2 + (j - center)^2)*250
}
}
w <- 1 - variogramLine(vm.sg, dist_vector = m)
return(w)
}
View(make.weights)
show.autocor <- function(n = 5) {
sg.utm.autocor <- terra::autocor(sg4.utm[[1]],
w=make.weights(n, res(sg4.utm)[1], vmf.sg),
method="moran", global = FALSE)
terra::plot(sg.utm.autocor, main = paste("SG250, Moran's I", n, "x", n),
col = rev(hcl.colors(32, palette = "RdYlGn")))
}
#| label: moving-window
show.autocor(5)
plot(sg4.utm)
plot(sg4.utm)[1]
sg4.utm
sg4.utm[[1]]
plot(sg4.utm[[1]])
#| label: moving-window
show.autocor(5)
show.autocor(7)
show.autocor(9)
#| label: ph.classes
# find the layer number for this property
(ix.ph05 <- which(layer.names == "phh2o_0-5cm_mean"))
#| label: ph.classes
# find the layer number for this property
(ix.ph05 <- which(layer.names == "phh2o_0-5cm_mean"))
(cuts <- seq(floor(min(values(sg4.utm[[ix.ph05]], na.rm = TRUE))),
ceiling(max(values(sg4.utm[[ix.ph05]], na.rm = TRUE))),
by = 0.4))
#| label: ph.classes
# find the layer number for this property
(ix.ph05 <- which(layer.names == "phh2o_0-5cm_mean"))
(cuts <- seq(floor(min(values(sg4.utm[[ix.ph05]], na.rm = TRUE))),
ceiling(max(values(sg4.utm[[ix.ph05]], na.rm = TRUE))),
by = 4))
#| label: ph.classes
# find the layer number for this property
(ix.ph05 <- which(layer.names == "phh2o_0-5cm_mean"))
(cuts <- seq(floor(min(values(sg4.utm[[ix.ph05]], na.rm = TRUE))),
ceiling(max(values(sg4.utm[[ix.ph05]], na.rm = TRUE))),
by = .4))
#| label: ph.classes
# find the layer number for this property
(ix.ph05 <- which(layer.names == "phh2o_0-5cm_mean"))
(cuts <- seq(floor(min(values(sg4.utm[[ix.ph05]], na.rm = TRUE))),
ceiling(max(values(sg4.utm[[ix.ph05]], na.rm = TRUE))),
by = 4))
#| label: classify-raster-cuts
sg.ph.class <- terra::classify(sg4.utm[[ix.ph05]], rcl= cuts)
table(values(sg.ph.class))
names(sg.ph.class) <- "class"
#| label: show.classified-cuts
terra::plot(sg.ph.class,
col=sp::bpy.colors(length(cuts)), type="classes",
main="SG2 pH 0.2 units")
#| label: coma
coma.ph <- lsp_signature(sg.ph.class, type="coma", neighbourhood = 8)
head(coma.ph.matrix <- as.matrix(coma.ph$signature)[[1]])
# proportion with adjacent of the same class
sum(diag(coma.ph.matrix))/sum(coma.ph.matrix)
#| label:  metrics.cove
# normalized co-occurence vector 8 x 8
print(cove.ph <- lsp_signature(sg.ph.class, type="cove", neighbourhood = 8))
#| label: list_metrics_patch
landscapemetrics::list_lsm(level="patch") %>% print(n = 12)
#| label: list_metrics_class
landscapemetrics::list_lsm(level="class") %>% print(n = 12)
#| label: list_metrics_class
landscapemetrics::list_lsm(level="class") %>% print(n = 12)
#| label: list_metrics_landscape
landscapemetrics::list_lsm(level="landscape") %>% print(n = 12)
#| label: compute.metrics.check
check_landscape(sg.ph.class)
check_landscape(sg.silt.class)
#| label: silt-map
#| fig-width: 8
(ix.silt05 <- which(layer.names == "silt_0-5cm_mean"))
summary(sg4.utm[[ix.silt05]])
(cuts <- seq(floor(min(values(sg4.utm[[ix.silt05]]-50, na.rm = TRUE))),
ceiling(max(values(sg4.utm[[ix.silt05]]+50, na.rm = TRUE))),
by = 50))
sg.silt.class <- terra::classify(sg4.utm[[ix.silt05]], rcl= cuts)
table(values(sg.silt.class))
names(sg.silt.class) <- "class"
plot(sg.silt.class, col = topo.colors(11),
main = layer.names[ix.silt05])
#| label: compute.metrics.check
check_landscape(sg.ph.class)
check_landscape(sg.silt.class)
#| label:  show.patches.global
#| fig-width: 8
show_patches(sg.ph.class, class = "global")
show_patches(sg.silt.class, class = "global")
#| label:  show.patches.all
#| fig-width: 14
show_patches(sg.ph.class, class = "all", nrow = 3)
lst <- paste0("lsm_l_", c("shdi", "shei", "lsi", "ai",  "frac_mn"))
ls.metrics.ph <- calculate_lsm(sg.ph.class, what=lst)
ls.metrics.silt <- calculate_lsm(sg.silt.class, what=lst)
metrics.table <- data.frame(product=c("pH", "silt"),
rbind(round(ls.metrics.ph$value, 3),
round(ls.metrics.silt$value, 3)))
names(metrics.table)[2:6] <- ls.metrics.ph$metric
metrics.table
#| label: SLIC-source
#| fig-width: 6
ggplot() +
geom_spatraster(data=sg4.utm[[ix.ph05]]) +
scale_fill_viridis_c() +
labs(fill = "pH x 10")
#| label: supercells-not-compact
#| fig-width: 6
sg4.ph.50 = supercells(sg4.utm[[ix.ph05]], k = 50, compactness = 0.1)
names(sg4.ph.50)
names(sg4.ph.50)[4] <- "pH_05cm" # `supercells` changes the name -- a bug?
ggplot(data=sg4.ph.50) +
geom_sf(aes(fill = pH_05cm)) +
scale_fill_viridis_c() +
labs(fill = "mean pH")
#| label: supercells-not-compact
#| fig-width: 6
sg4.ph.50 = supercells(sg4.utm[[ix.ph05]], k = 20, compactness = 0.1)
names(sg4.ph.50)
names(sg4.ph.50)[4] <- "pH_05cm" # `supercells` changes the name -- a bug?
ggplot(data=sg4.ph.50) +
geom_sf(aes(fill = pH_05cm)) +
scale_fill_viridis_c() +
labs(fill = "mean pH")
#| label: supercells-compact
#| fig-width: 6
sg4.ph.50 = supercells(sg4.utm[[ix.ph05]], k = 50, compactness = 3)
names(sg4.ph.50)[4] <- "pH_05cm" # `supercells` changes the name -- a bug?
ggplot(data=sg4.ph.50) +
geom_sf(aes(fill = pH_05cm)) +
scale_fill_viridis_c() +
labs(fill = "mean pH")
#| label: supercells-not-compact
#| fig-width: 6
sg4.ph.50 = supercells(sg4.utm[[ix.ph05]], k = 100, compactness = 0.05)
names(sg4.ph.50)
names(sg4.ph.50)[4] <- "pH_05cm" # `supercells` changes the name -- a bug?
ggplot(data=sg4.ph.50) +
geom_sf(aes(fill = pH_05cm)) +
scale_fill_viridis_c() +
labs(fill = "mean pH")
#| label: supercells-multiple
#| fig-width: 6
r <- c(sg4.utm[[ix.ph05]], sg4.utm[[ix.silt05]])
r.50 = supercells(r, k = 50, compactness = 0.1)
ggplot(data=r.50) +
geom_sf(aes(fill = phh2o_0.5cm_mean)) +
labs(fill = "mean pH") +
scale_fill_continuous(type = "viridis")
ggplot(data=r.50) +
geom_sf(aes(fill = silt_0.5cm_mean)) +
labs(fill = "silt ppt") +
scale_fill_continuous(type = "viridis")
ggplot(data=r.50) +
geom_sf(aes(fill = phh2o_0.5cm_mean)) +
labs(fill = "mean pH") +
scale_fill_continuous(type = "viridis")
ggplot(data=r.50) +
geom_sf(aes(fill = silt_0.5cm_mean)) +
labs(fill = "silt ppt") +
scale_fill_continuous(type = "viridis")
ggplot(data=r.50) +
geom_sf(aes(fill = phh2o_0.5cm_mean)) +
labs(fill = "mean pH") +
scale_fill_continuous(type = "viridis")
#| label: variogram_model
vm.sg <- vgm(0.8*max(v.sg$gamma), "Gau", range.init, 0)
print(vmf.sg <- fit.variogram(v.sg, model=vm.sg))
e
e
#| label: fitted_variogram_model
#| fig-width: 8
#| fig-height: 4
plot(v.sg, model=vmf.sg, main = layer.names[1],
xlab = "separation m", ylab = expression(paste(Delta, plain(pH)^2)))
#| label: moving-window
show.autocor(5)
show.autocor(7)
show.autocor(9)
show.autocor(7)
show.autocor(9)
class(s4)
class(sg4)
