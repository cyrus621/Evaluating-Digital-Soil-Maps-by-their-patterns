knitr::opts_chunk$set(cache.extra = R.version.string, comment="")
# Chunk 4: set.dirs
(base.dir.sg <- path.expand("~/ds_reference/DSM2025/"))
(base.dir.sg.import <- path.expand("~/tmp/DSM2025/"))
# Chunk 5: load.pkgs
library(sf)             # spatial data types
library(terra)          # raster data, replaces `raster`
require(rgdal)          # directly access GDAL functions -- deprecated but still works
require(gdalUtilities)
require(XML)
# Chunk 7: crs.igh
crs.igh <- '+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs'
# Chunk 8: q.list
quantile.list <- c("Q0.05", "Q0.5", "Q0.95", "mean")
# Chunk 9: voi.list
voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod", "cfvo", "nitrogen", "ocd")
# Chunk 10: d.list
depth.list <- paste0(c("0-5", "5-15", "15-30", "30-60", "60-100", "100-200"),"cm")
# Chunk 11
print(paste("VOI:", voi.list.sg[params$voi.n]))
print(paste("Depth slice:", depth.list[params$depth.n]))
print(paste("Quantile:", quantile.list[params$quantile.n]))
# Chunk 12: select.prop.d.q
voi <- voi.list.sg[params$voi.n]
depth <- depth.list[params$depth.n]
quantile.sg <- quantile.list[params$quantile.n]
(voi_layer <- paste(voi, depth, quantile.sg, sep="_"))
# Chunk 13: lrc
tile.lrc <- c(params$lrc_long, params$lrc_lat) # lower-right corner
size <- params$size                # tile dimensions
print(paste("Lower-right corner: longitude", params$lrc_long,
"; latitude", params$lrc_lat,
"; tile size:", params$size, "degree square"))
# Chunk 14: ulc
tile.ulc <- c(tile.lrc[1]-size, tile.lrc[2]+size)   # upper-left corner
m <- matrix(c(tile.lrc[1]-size, tile.lrc[2]+size,  #ulc
tile.lrc[1], tile.lrc[2]+size,  #urc
tile.lrc[1], tile.lrc[2],       #lrc
tile.lrc[1]-size, tile.lrc[2]  #lcc
),
nrow=4, byrow = TRUE)
m <- rbind(m, m[1,]) # close the polygon
bb.ll <- st_sfc(st_polygon(list(m)))
# Chunk 15
st_crs(bb.ll) <- 4326
# print(bb.ll)
# st_boundary(bb.ll)
# Chunk 16: dir.prefix
(AOI.dir.prefix <- paste0("lat", tile.lrc[2], tile.ulc[2],
"_lon", tile.ulc[1], tile.lrc[1]))
# Chunk 17: dest.dirs
(dest.dir.sg.import <-  paste0(base.dir.sg.import, AOI.dir.prefix))
if (!dir.exists(dest.dir.sg.import)) {
dir.create(dest.dir.sg.import, recursive = TRUE)
}
(dest.dir.sg <-  paste0(base.dir.sg,
AOI.dir.prefix))
if (!dir.exists(dest.dir.sg)) {
dir.create(dest.dir.sg, recursive = TRUE)
}
# Chunk 18: bbox
(bb.igh <- st_transform(bb.ll, crs.igh))         # reproject the polygon
(bb.igh.coords <-  st_coordinates(bb.igh)[,1:2]) # convert to coördinates, we only need 2D
#  convert to a bounding box, must order these as c(ulx, uly, lrx, lry)
bb.sg <- as.vector(c(min(bb.igh.coords[,"X"]),
max(bb.igh.coords[,"Y"]),
max(bb.igh.coords[,"X"]),
min(bb.igh.coords[,"Y"])))
# Chunk 19
wcs_request <- "DescribeCoverage"
wcs_path <- paste0("https://maps.isric.org/mapserv?map=/map/",voi,".map") # Path to the WCS. See maps.isric.org
wcs_service = "SERVICE=WCS"
wcs_version = "VERSION=2.0.1"
(wcs <- paste(wcs_path, wcs_service, wcs_version, wcs_request, sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
# Save to local disk
xml.out <- "./sg.xml"
tmp <- saveXML(l1, file = xml.out)
gdalinfo("./sg.xml")
# Chunk 20
(wcs <- paste(wcs_path,wcs_service,wcs_version,sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
xml.out = "./sg.xml"
tmp <- saveXML(l1, file = xml.out)
(file.out <- paste0(dest.dir.sg.import, "/", voi_layer, '.tif'))
gdal_translate(xml.out, file.out,
tr=c(250,250),
projwin = bb.sg, projwin_srs = crs.igh, # corners in this CRS
co=c("TILED=YES","COMPRESS=DEFLATE","PREDICTOR=2","BIGTIFF=YES")
)
# Chunk 21: get.sg.igh
r.sg <- terra::rast(file.out)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, purl=FALSE, fig.align = 'center')
knitr::opts_chunk$set(cache.extra = R.version.string, comment="")
# Chunk 4: set.dirs
(base.dir.sg <- path.expand("~/ds_reference/DSM2025/"))
(base.dir.sg.import <- path.expand("~/tmp/DSM2025/"))
# Chunk 5: load.pkgs
library(sf)             # spatial data types
library(terra)          # raster data, replaces `raster`
require(rgdal)          # directly access GDAL functions -- deprecated but still works
require(gdalUtilities)
require(XML)
# Chunk 7: crs.igh
crs.igh <- '+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs'
# Chunk 8: q.list
quantile.list <- c("Q0.05", "Q0.5", "Q0.95", "mean")
# Chunk 9: voi.list
voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod", "cfvo", "nitrogen", "ocd")
# Chunk 10: d.list
depth.list <- paste0(c("0-5", "5-15", "15-30", "30-60", "60-100", "100-200"),"cm")
# Chunk 11
print(paste("VOI:", voi.list.sg[params$voi.n]))
print(paste("Depth slice:", depth.list[params$depth.n]))
print(paste("Quantile:", quantile.list[params$quantile.n]))
# Chunk 12: select.prop.d.q
voi <- voi.list.sg[params$voi.n]
depth <- depth.list[params$depth.n]
quantile.sg <- quantile.list[params$quantile.n]
(voi_layer <- paste(voi, depth, quantile.sg, sep="_"))
# Chunk 13: lrc
tile.lrc <- c(params$lrc_long, params$lrc_lat) # lower-right corner
size <- params$size                # tile dimensions
print(paste("Lower-right corner: longitude", params$lrc_long,
"; latitude", params$lrc_lat,
"; tile size:", params$size, "degree square"))
# Chunk 14: ulc
tile.ulc <- c(tile.lrc[1]-size, tile.lrc[2]+size)   # upper-left corner
m <- matrix(c(tile.lrc[1]-size, tile.lrc[2]+size,  #ulc
tile.lrc[1], tile.lrc[2]+size,  #urc
tile.lrc[1], tile.lrc[2],       #lrc
tile.lrc[1]-size, tile.lrc[2]  #lcc
),
nrow=4, byrow = TRUE)
m <- rbind(m, m[1,]) # close the polygon
bb.ll <- st_sfc(st_polygon(list(m)))
# Chunk 15
st_crs(bb.ll) <- 4326
# print(bb.ll)
# st_boundary(bb.ll)
# Chunk 16: dir.prefix
(AOI.dir.prefix <- paste0("lat", tile.lrc[2], tile.ulc[2],
"_lon", tile.ulc[1], tile.lrc[1]))
# Chunk 17: dest.dirs
(dest.dir.sg.import <-  paste0(base.dir.sg.import, AOI.dir.prefix))
if (!dir.exists(dest.dir.sg.import)) {
dir.create(dest.dir.sg.import, recursive = TRUE)
}
(dest.dir.sg <-  paste0(base.dir.sg,
AOI.dir.prefix))
if (!dir.exists(dest.dir.sg)) {
dir.create(dest.dir.sg, recursive = TRUE)
}
# Chunk 18: bbox
(bb.igh <- st_transform(bb.ll, crs.igh))         # reproject the polygon
(bb.igh.coords <-  st_coordinates(bb.igh)[,1:2]) # convert to coördinates, we only need 2D
#  convert to a bounding box, must order these as c(ulx, uly, lrx, lry)
bb.sg <- as.vector(c(min(bb.igh.coords[,"X"]),
max(bb.igh.coords[,"Y"]),
max(bb.igh.coords[,"X"]),
min(bb.igh.coords[,"Y"])))
# Chunk 19
wcs_request <- "DescribeCoverage"
wcs_path <- paste0("https://maps.isric.org/mapserv?map=/map/",voi,".map") # Path to the WCS. See maps.isric.org
wcs_service = "SERVICE=WCS"
wcs_version = "VERSION=2.0.1"
(wcs <- paste(wcs_path, wcs_service, wcs_version, wcs_request, sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
# Save to local disk
xml.out <- "./sg.xml"
tmp <- saveXML(l1, file = xml.out)
gdalinfo("./sg.xml")
# Chunk 20
(wcs <- paste(wcs_path,wcs_service,wcs_version,sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
xml.out = "./sg.xml"
tmp <- saveXML(l1, file = xml.out)
(file.out <- paste0(dest.dir.sg.import, "/", voi_layer, '.tif'))
gdal_translate(xml.out, file.out,
tr=c(250,250),
projwin = bb.sg, projwin_srs = crs.igh, # corners in this CRS
co=c("TILED=YES","COMPRESS=DEFLATE","PREDICTOR=2","BIGTIFF=YES")
)
# Chunk 21: get.sg.igh
r.sg <- terra::rast(file.out)
print(r.sg)
summary(values(r.sg))
terra::plot(r.sg, col=(sp::bpy.colors(50)), main = voi_layer)
# Chunk 22: get.sg.igh.na
#| label: 0-to-NA
quantile(values(r.sg), seq(0,1,by=0.05), na.rm = TRUE)
values(r.sg) <- ifelse(values(r.sg) < 1, NA, values(r.sg))
quantile(values(r.sg), seq(0,1,by=0.05), na.rm = TRUE)
# terra::plot(r.sg, col=(sp::bpy.colors(50)), main = voi_layer)
# Chunk 23: transform.crs
st_bbox(r.sg)
st_crs(r.sg)$proj4string
st_crs(r.sg)$epsg       # not in the EPSG database
r.sg.84 <- terra::project(r.sg, "epsg:4326")
quantile(values(r.sg.84), seq(0,1,by=.1), na.rm = TRUE)
st_crs(r.sg.84)$proj4string
st_crs(r.sg.84)$epsg
# Chunk 24: show.wgs84.tile
r.sg.84.crop <- crop(r.sg.84, bb.ll)
quantile(values(r.sg.84.crop), seq(0,1,by=0.05), na.rm = TRUE)
terra::plot(r.sg.84.crop, col=(sp::bpy.colors(50)), main = voi_layer)
# Chunk 25: save.tile
print(paste("file name:",
file.out <- paste0(dest.dir.sg, "/", voi_layer, '.tif')))
writeRaster(r.sg.84.crop, file = file.out,
overwrite=TRUE, datatype="FLT4S",
gdal ="TFW=YES")
## test from Betony
library(XML)
library(gdalUtilities)
voi = "bdod" # variable of interest
depth = "0-5cm"
quantile = "mean"
voi_layer = paste(voi,depth,quantile, sep="_") # layer of interest
voi_layer
wcs_path
wcs_path = paste0("https://maps.isric.org/mapserv?map=/map/",voi,".map") # Path to the WCS. See maps.isric.org
wcs_path
(wcs <- paste(wcs_path,wcs_service,wcs_version,sep="&"))
wcs_service = "SERVICE=WCS"
wcs_version = "VERSION=2.0.1" # This works for gdal >=2.3; "VERSION=1.1.1" works with gdal < 2.3.
wcs = paste(wcs_path,wcs_service,wcs_version,sep="&") # This works for gdal >= 2.3
wcs
wcs_request <- "DescribeCoverage"
wcs_path <- paste0("https://maps.isric.org/mapserv?map=/map/",voi,".map") # Path to the WCS. See maps.isric.org
wcs_service = "SERVICE=WCS"
wcs_version = "VERSION=2.0.1"
(wcs <- paste(wcs_path, wcs_service, wcs_version, wcs_request, sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
# Save to local disk
xml.out <- "./sg.xml"
tmp <- saveXML(l1, file = xml.out)
gdalinfo("./sg.xml")
?saveXML
wcs_request <- "DescribeCoverage"
wcs_path <- paste0("https://maps.isric.org/mapserv?map=/map/",voi,".map") # Path to the WCS. See maps.isric.org
wcs_service = "SERVICE=WCS"
wcs_version = "VERSION=2.0.1"
(wcs <- paste(wcs_path, wcs_service, wcs_version, wcs_request, sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
# Save to local disk
xml.out <- "./sg2.xml"
tmp <- saveXML(l1, file = xml.out)
gdalinfo("./sg2.xml")
(wcs <- paste(wcs_path,wcs_service,wcs_version,sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
xml.out = "./sg2.xml"
tmp <- saveXML(l1, file = xml.out)
(file.out <- paste0(dest.dir.sg.import, "/", voi_layer, '.tif'))
gdal_translate(xml.out, file.out,
tr=c(250,250),
projwin = bb.sg, projwin_srs = crs.igh, # corners in this CRS
co=c("TILED=YES","COMPRESS=DEFLATE","PREDICTOR=2","BIGTIFF=YES")
)
# Get a set of SG250 tiles (properties, depth slices)
# run the sections of interest
# can follow this with SoilGrids250_MakeRasterStack.Rmd
require(rmarkdown)
# set lower-right corner of the area of interest, the tile size,
lrc.long <- 78; lrc.lat <-  10; tile.size <- 1
# set the quantile
# quantile.list <- c("Q0.05", "Q0.5", "Q0.95", "mean")
quantile <- 4  # mean
# Example: one property, all depth slices
# voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod", "cfvo", "nitrogen", "ocd")
# depth.list <- paste0(c("0-5", "5-15", "15-30", "30-60", "60-100", "100-200"),"cm")
voi <- 7 # example: cec
voi.list.sg[voi]
tmp <- lapply(1, function (i) {
rmarkdown::render("SoilGrids250_WCS_import.Rmd", output_format = NULL,
output_file = tempfile(), # don't write any output
params = list(lrc_long = lrc.long, lrc_lat = lrc.lat,
size = tile.size,
quantile.n = quantile,
voi.n = voi,
depth.n = i))
})
tmp <- lapply(2:7, function (i) {
rmarkdown::render("SoilGrids250_WCS_import.Rmd", output_format = NULL,
output_file = tempfile(), # don't write any output
params = list(lrc_long = lrc.long, lrc_lat = lrc.lat,
size = tile.size,
quantile.n = quantile,
voi.n = voi,
depth.n = i))
})
# Example: one property, all depth slices
# voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod", "cfvo", "nitrogen", "ocd")
# depth.list <- paste0(c("0-5", "5-15", "15-30", "30-60", "60-100", "100-200"),"cm")
voi <- 6 # example: cec
voi.list.sg[voi]
tmp <- lapply(1:6, function (i) {
rmarkdown::render("SoilGrids250_WCS_import.Rmd", output_format = NULL,
output_file = tempfile(), # don't write any output
params = list(lrc_long = lrc.long, lrc_lat = lrc.lat,
size = tile.size,
quantile.n = quantile,
voi.n = voi,
depth.n = i))
})
setwd("~/GitHub/Evaluating-Digital-Soil-Maps-by-their-patterns/PatternAnalysisWorkshop")
# Example: one property, all depth slices
# voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod", "cfvo", "nitrogen", "ocd")
# depth.list <- paste0(c("0-5", "5-15", "15-30", "30-60", "60-100", "100-200"),"cm")
voi <- 1 # example: cec
voi.list.sg[voi]
tmp <- lapply(1:6, function (i) {
rmarkdown::render("SoilGrids250_WCS_import.Rmd", output_format = NULL,
output_file = tempfile(), # don't write any output
params = list(lrc_long = lrc.long, lrc_lat = lrc.lat,
size = tile.size,
quantile.n = quantile,
voi.n = voi,
depth.n = i))
})
(base.dir <- path.expand("~/ds_reference/DSM2025"))
library(terra)          # raster data, replaces `raster`
# directory for this AOI
AOI.dir.prefix <- paste0("lat", params$lrc_lat, params$lrc_lat+params$size,
"_lon", params$lrc_long-params$size,
params$lrc_long)
(files.dir <- paste0(base.dir, "/", AOI.dir.prefix))
length(files.list <- list.files(files.dir, pattern = "*.tif"))
rs <- rast(paste0(files.dir, "/", files.list))
sources(rs)
summary(rs)
plot(rs[[1:9]])
print(paste("file name:",
file.out <- paste0(base.dir, "/", AOI.dir.prefix, "_stack.tif")))
writeRaster(rs, filename = file.out,
datatype="FLT4S",
overwrite=TRUE,
gdal ="TFW=YES")
?tempfile
tempfile("sg","",".xml")
tempfile("./sg","",".xml")
# Save to local disk
xml.out <- paste0(".", tempfile("sg","",".xml"))
xml.out
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, purl=FALSE, fig.align = 'center')
knitr::opts_chunk$set(cache.extra = R.version.string, comment="")
# Chunk 4: set.dirs
(base.dir.sg <- path.expand("~/ds_reference/DSM2025/"))
(base.dir.sg.import <- path.expand("~/tmp/DSM2025/"))
# Chunk 5: load.pkgs
library(sf)             # spatial data types
library(terra)          # raster data, replaces `raster`
require(rgdal)          # directly access GDAL functions -- deprecated but still works
require(gdalUtilities)
require(XML)
# Chunk 7: crs.igh
crs.igh <- '+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs'
# Chunk 8: q.list
quantile.list <- c("Q0.05", "Q0.5", "Q0.95", "mean")
# Chunk 9: voi.list
voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod", "cfvo", "nitrogen", "ocd")
# Chunk 10: d.list
depth.list <- paste0(c("0-5", "5-15", "15-30", "30-60", "60-100", "100-200"),"cm")
# Chunk 11
print(paste("VOI:", voi.list.sg[params$voi.n]))
print(paste("Depth slice:", depth.list[params$depth.n]))
print(paste("Quantile:", quantile.list[params$quantile.n]))
# Chunk 12: select.prop.d.q
voi <- voi.list.sg[params$voi.n]
depth <- depth.list[params$depth.n]
quantile.sg <- quantile.list[params$quantile.n]
(voi_layer <- paste(voi, depth, quantile.sg, sep="_"))
# Chunk 13: lrc
tile.lrc <- c(params$lrc_long, params$lrc_lat) # lower-right corner
size <- params$size                # tile dimensions
print(paste("Lower-right corner: longitude", params$lrc_long,
"; latitude", params$lrc_lat,
"; tile size:", params$size, "degree square"))
# Chunk 14: ulc
tile.ulc <- c(tile.lrc[1]-size, tile.lrc[2]+size)   # upper-left corner
m <- matrix(c(tile.lrc[1]-size, tile.lrc[2]+size,  #ulc
tile.lrc[1], tile.lrc[2]+size,  #urc
tile.lrc[1], tile.lrc[2],       #lrc
tile.lrc[1]-size, tile.lrc[2]  #lcc
),
nrow=4, byrow = TRUE)
m <- rbind(m, m[1,]) # close the polygon
bb.ll <- st_sfc(st_polygon(list(m)))
# Chunk 15
st_crs(bb.ll) <- 4326
# print(bb.ll)
# st_boundary(bb.ll)
# Chunk 16: dir.prefix
(AOI.dir.prefix <- paste0("lat", tile.lrc[2], tile.ulc[2],
"_lon", tile.ulc[1], tile.lrc[1]))
# Chunk 17: dest.dirs
(dest.dir.sg.import <-  paste0(base.dir.sg.import, AOI.dir.prefix))
if (!dir.exists(dest.dir.sg.import)) {
dir.create(dest.dir.sg.import, recursive = TRUE)
}
(dest.dir.sg <-  paste0(base.dir.sg,
AOI.dir.prefix))
if (!dir.exists(dest.dir.sg)) {
dir.create(dest.dir.sg, recursive = TRUE)
}
# Chunk 18: bbox
(bb.igh <- st_transform(bb.ll, crs.igh))         # reproject the polygon
(bb.igh.coords <-  st_coordinates(bb.igh)[,1:2]) # convert to coördinates, we only need 2D
#  convert to a bounding box, must order these as c(ulx, uly, lrx, lry)
bb.sg <- as.vector(c(min(bb.igh.coords[,"X"]),
max(bb.igh.coords[,"Y"]),
max(bb.igh.coords[,"X"]),
min(bb.igh.coords[,"Y"])))
# Chunk 19
wcs_request <- "DescribeCoverage"
wcs_path <- paste0("https://maps.isric.org/mapserv?map=/map/",voi,".map") # Path to the WCS. See maps.isric.org
wcs_service = "SERVICE=WCS"
wcs_version = "VERSION=2.0.1"
(wcs <- paste(wcs_path, wcs_service, wcs_version, wcs_request, sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
# Save to local disk
xml.out <- paste0(".", tempfile("sg","",".xml"))
tmp <- saveXML(l1, file = xml.out)
gdalinfo(xml.out)
(wcs <- paste(wcs_path,wcs_service,wcs_version,sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
xml.out <- paste0(".", tempfile("sg","",".xml"))
tmp <- saveXML(l1, file = xml.out)
(file.out <- paste0(dest.dir.sg.import, "/", voi_layer, '.tif'))
gdal_translate(xml.out, file.out,
tr=c(250,250),
projwin = bb.sg, projwin_srs = crs.igh, # corners in this CRS
co=c("TILED=YES","COMPRESS=DEFLATE","PREDICTOR=2","BIGTIFF=YES")
)
r.sg <- terra::rast(file.out)
print(r.sg)
summary(values(r.sg))
terra::plot(r.sg, col=(sp::bpy.colors(50)), main = voi_layer)
file.remove(xml.out)
?file.remove
xml.out
xml.DC <- strplit(xml.out,".")
xml.DC <- strsplit(xml.out,".")
xml.DC
xml.DC <- strsplit(xml.out,".", fixed = TRUE)
xml.DC <- strsplit(xml.out,".", fixed = TRUE)
xml.DC
xml.DC <- strsplit(xml.out,".", fixed = TRUE)[[1]]
xml.DC <- strsplit(xml.out,".", fixed = TRUE)[[1]]
xml.DC
xml.DC <- strsplit(xml.out,".", fixed = TRUE)[[1]][2]
xml.DC
xml.DC <- paste0(".", strsplit(xml.out,".", fixed = TRUE)[[1]][2], "_DC.xml")
(xml.DC <- paste0(".", strsplit(xml.out,".", fixed = TRUE)[[1]][2], "_DC.xml"))
?saveXML
if (file.exists(xml.DC)) file.remove(xml.DC)
wcs_request <- "DescribeCoverage"
wcs_path <- paste0("https://maps.isric.org/mapserv?map=/map/",voi,".map") # Path to the WCS. See maps.isric.org
wcs_service = "SERVICE=WCS"
wcs_version = "VERSION=2.0.1"
(wcs <- paste(wcs_path, wcs_service, wcs_version, wcs_request, sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
# Save to local disk
xml.out <- paste0(".", tempfile("sg","",".xml"))
tmp <- saveXML(l1, file = xml.out)
gdalinfo(xml.out)
file.remove(xml.out)
# also remove 'helper' XML if created by saveXML
xml.DC <- paste0(".", strsplit(xml.out,".", fixed = TRUE)[[1]][2], "_DC.xml")
if (file.exists(xml.DC)) file.remove(xml.DC)
xml.DC
# also remove 'helper' XML if created by saveXML
xml.DC <- paste0(".", strsplit(xml.out,".", fixed = TRUE)[[1]][2], ".DC.xml")
if (file.exists(xml.DC)) file.remove(xml.DC)
(wcs <- paste(wcs_path,wcs_service,wcs_version,sep="&"))
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", voi_layer, parent=l1)
xml.out <- paste0(".", tempfile("sg","",".xml"))
tmp <- saveXML(l1, file = xml.out)
(file.out <- paste0(dest.dir.sg.import, "/", voi_layer, '.tif'))
gdal_translate(xml.out, file.out,
tr=c(250,250),
projwin = bb.sg, projwin_srs = crs.igh, # corners in this CRS
co=c("TILED=YES","COMPRESS=DEFLATE","PREDICTOR=2","BIGTIFF=YES")
)
file.remove(xml.out)
# also remove 'helper' XML if created by saveXML
xml.DC <- paste0(".", strsplit(xml.out,".", fixed = TRUE)[[1]][2], ".DC.xml")
if (file.exists(xml.DC)) file.remove(xml.DC)
